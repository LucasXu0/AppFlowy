name: Flutter Build
description: Build AppFlowy Flutter app

inputs:
  os:
    description: "The operating system to run the build on"
    required: true
  flutter_version:
    description: "The version of Flutter to use"
    required: true
  rust_toolchain:
    description: "The version of Rust to use"
    required: true
  cargo_make_version:
    description: "The version of cargo-make to use"
    required: true
  rust_target:
    description: "The target to build for"
    required: true
  flutter_profile:
    description: "The profile to build with"
    required: true

runs:
  using: "composite"

  steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ~/.cargo
          ~/.rustup
        key: ${{ runner.os }}-flutter-rust-${{ hashFiles('**/pubspec.lock', '**/Cargo.lock') }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust_toolchain }}
        target: ${{ inputs.rust_target }}
        override: true
        profile: minimal

    - name: Install flutter
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        flutter-version: ${{ inputs.flutter_version }}
        cache: true

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: ${{ inputs.os }}
        workspaces: |
          frontend/rust-lib
        cache-all-crates: true

    - name: Install cargo-make and duckscript_cli
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-make@${{ inputs.cargo_make_version }}, duckscript_cli

    - name: Install prerequisites
      working-directory: frontend
      run: |
        case $RUNNER_OS in
          Linux)
            sudo apt-get update
            sudo apt-get install -y curl build-essential libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev keybinder-3.0 libnotify-dev libmpv-dev mpv
            ;;
          Windows)
            vcpkg integrate install
            ;;
          macOS)
            echo 'No additional prerequisites needed for macOS'
            ;;
        esac
        cargo make appflowy-flutter-deps-tools
      shell: bash

    - name: Build AppFlowy and run code generation
      working-directory: frontend
      run: |
        cargo make --profile ${{ inputs.flutter_profile }} appflowy-core-dev &
        cargo make code_generation &
        wait
      shell: bash

    - name: Flutter Analyzer
      working-directory: frontend/appflowy_flutter
      run: flutter analyze .
      shell: bash

    - name: Compress appflowy_flutter
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a -tzip appflowy_flutter.zip frontend/appflowy_flutter
        else
          tar -czf appflowy_flutter.tar.gz frontend/appflowy_flutter
        fi
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ github.run_id }}-${{ inputs.os }}
        path: appflowy_flutter.*
